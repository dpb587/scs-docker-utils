#!/usr/bin/env node

var child_process = require('child_process');

// --

var cli = new (require('argparse').ArgumentParser)({ description : 'Send a reverse DNS update.' });

cli.addArgument([ '--log-level' ], { help : 'logging level', defaultValue : 'info' });

cli.addArgument([ 'dns' ], { help : 'DNS server', metavar : 'IP' });
cli.addArgument([ 'keypath' ], { help : 'DNS private key to use for updates' });
cli.addArgument([ 'ip' ], { help : 'Local IP for the pointer' });
cli.addArgument([ 'pointer' ], { help : 'FQDN pointer value' });

var cliargs = cli.parseArgs();

var logger = require('npmlog');
logger.level = cliargs.log_level;

// --

logger.silly('process/args', JSON.stringify(cliargs));

// --

var reverseip = cliargs.ip.split('.');
reverseip.reverse();

var ps = child_process.spawn(
    '/usr/bin/nsupdate',
    [
        '-k',
        cliargs.keypath
    ]
);

ps.stdin.write('server ' + cliargs.dns + '\n');
ps.stdin.write('zone ' + reverseip.slice(-3).join('.') + '.in-addr.arpa\n');
ps.stdin.write('update delete ' + reverseip.join('.') + '.in-addr.arpa PTR' + '\n');
ps.stdin.write('update add ' + reverseip.join('.') + '.in-addr.arpa 300 PTR ' + cliargs.pointer + '\n');
ps.stdin.write('send' + '\n');
ps.stdin.end();

ps.stdout.on(
    'data',
    function (chunk) {
        logger.verbose(
            'nsupdate/stdout',
            chunk.toString('utf8')
        );
    }
);

ps.stderr.on(
    'data',
    function (chunk) {
        logger.verbose(
            'nsupdate/stderr',
            chunk.toString('utf8')
        );
    }
);

ps.on(
    'error',
    function (error) {
        throw error;
    }
);
