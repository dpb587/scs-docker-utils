#!/usr/bin/env node

var cli = new (require('argparse').ArgumentParser)({ description : 'Run a disco registry client.' });

cli.addArgument([ '--log-level' ], { help : 'logging level', defaultValue : 'info' });
cli.addArgument([ '--disco-server' ], { help : 'disco server', defaultValue : '127.0.0.1:9640', metavar : 'HOST[:PORT]' });
cli.addArgument([ '--forward' ], { help : 'forward a port to an endpoint', action : 'append', required : true, metavar : 'PORT:ENDPOINT[:ROLE][:SERVICE][:ENV]' });
cli.addArgument([ '--ip' ], { help : 'ip address to bind to', defaultValue : '0.0.0.0' });
cli.addArgument([ 'envname' ], { help : 'environment name', nargs : '?', defaultValue : 'default' });
cli.addArgument([ 'servicename' ], { help : 'service name', nargs : '?', defaultValue : 'default' });
cli.addArgument([ 'rolename' ], { help : 'role name', nargs : '?', defaultValue : 'default' });

var cliargs = cli.parseArgs();

// --

var logger = require('npmlog');
logger.level = cliargs.log_level;

logger.silly('process/args', JSON.stringify(cliargs));

cliargs.disco_server = cliargs.disco_server.split(':');

logger.silly('process/args', JSON.stringify(cliargs));

// --

var child_process = require('child_process');
var net = require('net');

// --

var client = new (require('../src/disco/service/tcp/client/service'))(
    {
        server : {
            address : 0 in cliargs.disco_server ? cliargs.disco_server[0] : '127.0.0.1',
            port : 1 in cliargs.disco_server ? cliargs.disco_server[1] : '9640'
        }
    },
    logger
);

var allEndpoints = {};
var proxies = [];

function registerForwarders() {
    cliargs.forward.forEach(
        function (forward) {
            var forwardz = forward.split(':');

            if (3 > forwardz.length) forwardz.push(cliargs.rolename);
            if (4 > forwardz.length) forwardz.push(cliargs.servicename);
            if (5 > forwardz.length) forwardz.push(cliargs.envname);

            var forwardn = forwardz.slice(1).reverse();
            forwardn = forwardn.join('/');

            allEndpoints[forward] = null;

            client.addRequirement(
                forwardz[1],
                {
                    environment : forwardz[4],
                    service : forwardz[3],
                    role : forwardz[2]
                },
                function (action, endpoints, callback) {
                    if ('initial' == action) {
                        allEndpoints[forward] = endpoints;
                    } else if ('add' == action) {
                        allEndpoints[forward].push.apply(
                            allEndpoints[forward],
                            endpoints
                        );
                    } else if ('drop' == action) {
                        var dropids = endpoints.map(
                            function (r) {
                                return r.id;
                            }
                        );

                        allEndpoints[forward] = allEndpoints[forward].filter(
                            function (r) {
                                return -1 == dropids.indexOf(r.id);
                            }
                        );
                    }

                    callback();
                }
            );

            proxies[forward] = net.createServer(
                function (from) {
                    if (0 == allEndpoints[forward].length) {
                        logger.error(forwardn + '/' + from.remoteAddress + ':' + from.remotePort, 'no available endpoint; connection closed');

                        from.end();

                        return;
                    }

                    var endpoint = allEndpoints[forward][0];

                    logger.verbose(forwardn + '/' + from.remoteAddress + ':' + from.remotePort, 'forwarded to ' + endpoint.address.address + ':' + endpoint.address.port);

                    var to = net.createConnection(
                        {
                            host : endpoint.address.address,
                            port : endpoint.address.port
                        }
                    )
                        .on(
                            'error',
                            function (err) {
                                logger.error(forwardn + '/' + from.remoteAddress + ':' + from.remotePort, err.message);
                            }
                        )
                    ;

                    from.pipe(to);
                    to.pipe(from);
                }
            )
                .listen(parseInt(forwardz[0], 10), cliargs.ip)
                .on(
                    'listening',
                    function () {
                        logger.info(forwardn, 'started');
                    }
                )
                .on(
                    'close',
                    function () {
                        logger.info(forwardn, 'stopped');
                    }
                )
                ;
        }
    );
}

client.start();

// --

registerForwarders();

// --

function handleSignal(signal) {
    logger.info('process/kill', signal);

    Object.keys(proxies).forEach(
        function (key) {
            proxies[key].close();
        }
    );

    client.stop();
}

process.on('SIGINT', function () { handleSignal('SIGINT'); });
process.on('SIGTERM', function () { handleSignal('SIGTERM'); });
process.on('SIGHUP', function () { handleSignal('SIGHUP'); });
