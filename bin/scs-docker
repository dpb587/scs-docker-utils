#!/usr/bin/env node

var fs = require('fs');
var os = require('os');
var path = require('path');
var util = require('util');

var Config = require('../src/util/config');
var Profile = require('../src/util/profile');
var Workflow = require('../src/util/workflow');

// --

var cli = new (require('argparse').ArgumentParser)({ description : 'Create a dynamic forwarding agent for etcd-based service discovery.' });

cli.addArgument([ '--log-level' ], { help : 'logging level', defaultValue : 'info' });

cli.addArgument([ '--compiled-file' ], { help : 'file to store compiled configuration', defaultValue : 'compiled.json', metavar : 'PATH' });

cli.addArgument([ 'command' ], { help : 'command to run', choices : [ 'cache-put', 'cache-get', 'build', 'rebuild', 'compile', 'recompile', 'run', 'run-load', 'run-unload' ] });
cli.addArgument([ 'runconf' ], { help : 'file(s) containing the runtime configuration', defaultValue : [ 'runtime.json' ], nargs : '*' });

var cliargs = cli.parseArgs();

var logger = require('npmlog');
logger.level = cliargs.log_level;

// --

var profile;

// --

process.on('exit', function () {
    if (profile && profile.ccompiled) {
        fs.writeFileSync(cliargs.compiled_file, JSON.stringify(profile.ccompiled.config, null, 2));
    }
});

process.on('uncaughtException', function (error) {
    logger.error('process/error', error.toString());
    logger.info('process/error', error.stack);

    process.exit(1);
});

// --

logger.silly('process/args', JSON.stringify(cliargs));

function abspath(p) {
    return path.resolve(process.cwd(), p);
}

cliargs.runconf = cliargs.runconf.map(abspath);
cliargs.compiled_file = abspath(cliargs.compiled_file);

logger.verbose('process/args', JSON.stringify(cliargs));

// --

var cruntime = new Config();
cruntime.importFiles(cliargs.runconf);
cruntime.log(logger, 'silly', 'scs/runtime');

// --

var ccompiled = new Config();

if (fs.existsSync(cliargs.compiled_file)) {
    ccompiled.importFile(cliargs.compiled_file);
}

ccompiled.log(logger, 'silly', 'scs/compiled');

// --

var profile = new Profile(cruntime, ccompiled, logger);
var workflow = new Workflow(process, logger, 'cli');

switch (cliargs.command) {
    case 'build':
        workflow.pushStep(
            'compile',
            function (workflow, callback) {
                profile.compile(callback);
            }
        );

        workflow.pushStep(
            'build',
            function (workflow, callback) {
                profile.build(callback);
            }
        );

        break;
    case 'rebuild':
        workflow.pushStep(
            'recompile',
            function (workflow, callback) {
                profile.recompile(callback);
            }
        );

        workflow.pushStep(
            'rebuild',
            function (workflow, callback) {
                profile.rebuild(callback);
            }
        );

        break;
    case 'compile':
        workflow.pushStep(
            'compile',
            function (workflow, callback) {
                profile.compile(callback);
            }
        );

        break;
    case 'recompile':
        workflow.pushStep(
            'recompile',
            function (workflow, callback) {
                profile.recompile(callback);
            }
        );

        break;
    case 'run':
        workflow.pushStep(
            'compile',
            function (workflow, callback) {
                profile.compile(callback);
            }
        );

        workflow.pushStep(
            'build',
            function (workflow, callback) {
                profile.build(callback);
            }
        );

        workflow.pushStep(
            'run',
            function (workflow, callback) {
                profile.createContainer(
                    function (error, container) {
                        if (error) {
                            callback(error);

                            return;
                        }

                        container.on(
                            'unload',
                            function () {
                                callback();
                            }
                        );

                        function handleSignal(signal) {
                            logger.info('process/kill', signal);

                            container.stop(
                                function (error, result) {
                                    if (error) {
                                        throw error;
                                        
                                        return;
                                    }

                                    logger.info('process/exit', 'container stopped');
                                }
                            );
                        }

                        process.on('SIGINT', function () { handleSignal('SIGINT'); });
                        process.on('SIGTERM', function () { handleSignal('SIGTERM'); });

                        container.start(
                            function (error, result) {
                                if (error) {
                                    throw error;

                                    return;
                                }

                                logger.info('container', 'started');
                            }
                        );
                    }
                );
            }
        );

        break;
    default:
        throw new Error('Invalid command "' + cliargs.command + '"');
}

workflow.run(
    function (error, result) {
        if (error) {
            logger.error(error.toString());
            logger.info(error.stack);

            process.exit(1);

            return;
        }
    }
);
